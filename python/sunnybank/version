20170425
module/logparse.py
216 + else:
217 + setLogPosition(p=0)
218 + else:
api/report.py 
234 + rows=list()
235 + rows=session.query(schema.User).filter_by(name=name).all()
236 + if rows == []:
244 + else:
245 + rows[0].paw=hashlib.sha1(paw).hexdigest()



20170424
module/logparse.py
36 m F5_SESSION_LOGOUT = LOG_DATE_TIME + F5_DEVICE_NAME_AND_LOG_LEVEL + F5_SESSION_ID + r'.* (?P<log_out>Session deleted due to user logout request\.)' -> F5_SESSION_LOGOUT = LOG_DATE_TIME + F5_DEVICE_NAME_AND_LOG_LEVEL + F5_SESSION_ID + r'.* (?P<log_out>PPP tunnel 0x\w+ closed\.)'
api/report.py
254 + if name != 'admin':
database/schema.py
97 m log_file = Column(String(255)) -> log_file_date = Column(String(16))
module/logparse.py
324~336 + def checkLogFile():
365 - ss=getFileOneDate()
373 m st=getFileOneDate() -> if checkLogFile():
374 m if ss != st: -> break
375 - break
338~351 + saveLogFile():
394~398 + if checkLogFile():
402 + setLogPosition(logfile.tell())
368~370 + if (time.time()-preTime) > 3600:
126,143 m if self.checkLogTime(dataT): -> if self.checkTime(dataT): 
407~416 + def getLogPosition():
419~433 + def setLogPosition(p,z=False):


20170408,09
templates/user_create_layout.html
18 + </br>
19 + <label>密碼：</label>
20 + <input type="text" id="user_paw" name="user_paw">
database/schema.py
72 + paw = Column(String(41))
85 + 'password': self.paw,
module/login.py
5 + from sunnybank.database import tools, schema
6 + import hashlib
18 + def local_auth(self):
36 m def do_authentication(self): -> def AD_auth(self):
18 + def do_authentication(self): 
api/report.py
230 + paw = form.user_paw.data
234 m user_data = schema.User(name=name,creator=creator) -> user_data = schema.User(name=name,paw=hashlib.sha1(paw).hexdigest(),creator=creator)
5 + import hashlib
module/form.py
19 + user_paw = StringField('user_paw:', validators=[DataRequired()])
database/tools.py
16~19 - # Database setting
14 + from sunnybank.config.enviroment import DB_CONNECT_STRING
config/enviroment.py
11~14 + # Database setting


20170329
molude/logparse.py
- def get_DB_log(self):
+ def getLogTimeForCheck(self):
+ def checkLogTime(self,dataT):
+ self.lastLogTime
config/enviroment.py
+ LOG_TIME
bug last log(or log of same time that last log) will be repeated

20170329before
molude/logparse.py
+ def get_DB_log(self):
+ def checkTime(self,dataT):
+ def getFileOneDate():
